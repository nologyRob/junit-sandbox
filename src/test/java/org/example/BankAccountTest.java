package org.example;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;class BankAccountTest {    BankAccount account;    @BeforeEach    public void init(){        System.out.println("Setting up account to test!");        account = new BankAccount("Rob", "Hooper", 1000);    }    @AfterEach    public void shutDown(){        System.out.println("Closing down the account");    }    @Test    void getFirstName_Valid_Request_ReturnsFirstName() {        // Arrange        String name;        // Act        name = account.getFirstName();        // Assert        assertEquals(name,"Rob");    }    @Test    void setFirstName_ValidInput_ReturnsFirstNameUpdated() {        // Arrange        String name;        // Act        account.setFirstName("Atif");        name = account.getFirstName();        // Assert        assertAll("Names", ()->{            assertEquals(name,"Atif");            assertNotEquals(name, "Rob");            assertNotEquals(name, "atif");        });    }    @Test    void getLastName() {        // Arrange        String name;        // Act        name = account.getFirstName();        // Assert        assertEquals(name, "Rob");    }    @Test    void setLastName() {        // Arrange        String name;        // Act        account.setFirstName("Scooper");        name = account.getFirstName();        // Assert        assertEquals(name,"Scooper");        assertNotEquals(name, "Hooper");    }    @Test    void getBalance() {        // Arrange        double balance;        // Act        balance = account.getBalance();        // Assert        assertEquals(balance,1000);        assertNotEquals(balance, 500);    }    @Test    void setBalance() {        // Arrange        double balance;        // Act        account.setBalance(2000);        balance = account.getBalance();                // Assert        assertEquals(balance,2000);        assertNotEquals(balance, 1000);    }    @Test    void deposit_ValidAmount_ReturnsUpdatedBalance() {        // Arrange        double balance;        // Act        balance = account.deposit(500);        // Assert        assertEquals(balance, 1500);    }    @Test    void withdraw_ValidWithdrawal_ReturnsUpdatedBalance() {        // Arrange        double balance;        // Act        balance = account.withdraw(500);        // Assert        assertEquals(balance, 500);        assertNotEquals(balance, 1000 );    }    @Test    void withdraw_InvalidAmount_ReturnsIllegalExceptionError(){        // Arrange        double balance;        // Act        // Assert        assertThrows(IllegalArgumentException.class, () -> {           account.withdraw(1200);        });    }}